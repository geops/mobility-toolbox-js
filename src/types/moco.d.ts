/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/api/schema/": {
    /**
     * OpenApi3 schema for this API. Format can be selected via content negotiation.
     *
     * - YAML: application/vnd.oai.openapi
     * - JSON: application/vnd.oai.openapi+json
     */
    get: operations["schema_retrieve"];
  };
  "/api/v1/export/publication/": {
    /** Export publications as GeoJSON */
    get: operations["v1_export_publication_list"];
  };
  "/api/v1/export/publication/{id}/": {
    /** Export publications as GeoJSON */
    get: operations["v1_export_publication_retrieve"];
  };
  "/api/v2/{tenant}/export/": {
    /**
     * Retrun result of the following GraphQL query:
     * ```graphql
     *
     * query exportPublications(
     *     # Path parameters:
     *     $tenant: String!,
     *     $situationId: ID
     *     # Pagination:
     *     $offset: Int!,
     *     $limit: Int!,
     *     # Geometry selection and modification:
     *     $graph: String,
     *     $simplify: Int!,
     *     $includeGeoms: Boolean!,
     *     $includeLines: Boolean!,
     *     $includeStops: Boolean!,
     *     $hasGeoms: Boolean,
     *     # Time filters:
     *     $publicAt: DateTime,
     *     $publicBefore: DateTime,
     *     $publicAfter: DateTime,
     *     $publicNow: Boolean!,
     *     $affectedAt: DateTime,
     *     $affectedBefore: DateTime,
     *     $affectedAfter: DateTime,
     *     # Textual content selection:
     *     $contentLarge: Boolean!,
     *     $contentSmall: Boolean!,
     *     $contentMedium: Boolean!,
     *     $de: Boolean!,
     *     $fr: Boolean!,
     *     $it: Boolean!,
     *     $en: Boolean!,
     * ) {
     *     paginatedSituations(
     *         tenant: $tenant
     *         pagination: {offset: $offset, limit: $limit}
     *         filters: {
     *             id: $situationId,
     *             publicNow: $publicNow,
     *             publicAt: $publicAt,
     *             publicBefore: $publicBefore,
     *             publicAfter: $publicAfter,
     *             affectedAt: $affectedAt,
     *             affectedBefore: $affectedBefore,
     *             affectedAfter: $affectedAfter,
     *             hasGeoms: $hasGeoms
     *         }
     *     ) {
     *       totalCount
     *       results {
     *           ...situationFragment
     *       }
     *     }
     * }
     *
     * fragment situationFragment on SituationType {
     *     id
     *     title
     *     publicationStopNames
     *     publicationLineNames
     *     affectedTimeIntervalsStart
     *     affectedTimeIntervalsEnd
     *     publicationWindowsStart
     *     publicationWindowsEnd
     *     reasons {
     *         name
     *         categoryName
     *         tenant
     *     }
     *     affectedTimeIntervals {
     *         startTime
     *         endTime
     *     }
     *     publicationWindows {
     *         startTime
     *         endTime
     *     }
     *     publications {
     *         severity
     *         severityGroup
     *         serviceCondition
     *         serviceConditionGroup
     *         publicationWindows {
     *             startTime
     *             endTime
     *         }
     *         publicationStops @include(if: $includeStops) {
     *             uid
     *             name
     *             geometry(filters: {graph: $graph}) @include(if: $includeGeoms) {
     *                 graph
     *                 geom(simplify:$simplify)
     *             }
     *         }
     *         publicationLines @include(if: $includeLines) {
     *             hasIcon
     *             category
     *             lines {
     *                 name
     *                 operatorRef
     *                 geometry(filters: {graph: $graph}) @include(if: $includeGeoms) {
     *                     graph
     *                     geom(simplify: $simplify)
     *                 }
     *             }
     *         }
     *         textualContentLarge @include(if: $contentLarge) {
     *             ...textualContentsFragment
     *         }
     *         textualContentSmall @include(if: $contentSmall) {
     *             ...textualContentsFragment
     *         }
     *         textualContentMedium @include(if: $contentMedium) {
     *             ...textualContentsFragment
     *         }
     *     }
     * }
     *
     * fragment textualContentFragment on TextualContentType {
     *     summary
     *     reason
     *     description
     *     consequence
     *     durationText
     *     recommendation
     * }
     *
     * fragment infoLinkFragment on InfoLinkType {
     *     uri
     *     label {
     *         de @include(if: $de)
     *         fr @include(if: $fr)
     *         it @include(if: $it)
     *         en @include(if: $en)
     *     }
     * }
     *
     * fragment indexedImageFragment on IndexedImageType {
     *     image {
     *         label
     *         absoluteUrl
     *     }
     * }
     *
     * fragment textualContentsFragment on MultilingualTextualContentType {
     *     de @include(if: $de) {
     *         ...textualContentFragment
     *     }
     *     fr @include(if: $fr) {
     *         ...textualContentFragment
     *     }
     *     it @include(if: $it) {
     *         ...textualContentFragment
     *     }
     *     en @include(if: $en) {
     *         ...textualContentFragment
     *     }
     *     images {
     *         ...indexedImageFragment
     *     }
     *     infoLinks {
     *         ...infoLinkFragment
     *     }
     * }
     *
     * ```
     */
    get: operations["v2_export_retrieve"];
  };
  "/api/v2/{tenant}/export/{situation_id}": {
    /**
     * Retrun result of the following GraphQL query:
     * ```graphql
     *
     * query exportPublications(
     *     # Path parameters:
     *     $tenant: String!,
     *     $situationId: ID
     *     # Pagination:
     *     $offset: Int!,
     *     $limit: Int!,
     *     # Geometry selection and modification:
     *     $graph: String,
     *     $simplify: Int!,
     *     $includeGeoms: Boolean!,
     *     $includeLines: Boolean!,
     *     $includeStops: Boolean!,
     *     $hasGeoms: Boolean,
     *     # Time filters:
     *     $publicAt: DateTime,
     *     $publicBefore: DateTime,
     *     $publicAfter: DateTime,
     *     $publicNow: Boolean!,
     *     $affectedAt: DateTime,
     *     $affectedBefore: DateTime,
     *     $affectedAfter: DateTime,
     *     # Textual content selection:
     *     $contentLarge: Boolean!,
     *     $contentSmall: Boolean!,
     *     $contentMedium: Boolean!,
     *     $de: Boolean!,
     *     $fr: Boolean!,
     *     $it: Boolean!,
     *     $en: Boolean!,
     * ) {
     *     paginatedSituations(
     *         tenant: $tenant
     *         pagination: {offset: $offset, limit: $limit}
     *         filters: {
     *             id: $situationId,
     *             publicNow: $publicNow,
     *             publicAt: $publicAt,
     *             publicBefore: $publicBefore,
     *             publicAfter: $publicAfter,
     *             affectedAt: $affectedAt,
     *             affectedBefore: $affectedBefore,
     *             affectedAfter: $affectedAfter,
     *             hasGeoms: $hasGeoms
     *         }
     *     ) {
     *       totalCount
     *       results {
     *           ...situationFragment
     *       }
     *     }
     * }
     *
     * fragment situationFragment on SituationType {
     *     id
     *     title
     *     publicationStopNames
     *     publicationLineNames
     *     affectedTimeIntervalsStart
     *     affectedTimeIntervalsEnd
     *     publicationWindowsStart
     *     publicationWindowsEnd
     *     reasons {
     *         name
     *         categoryName
     *         tenant
     *     }
     *     affectedTimeIntervals {
     *         startTime
     *         endTime
     *     }
     *     publicationWindows {
     *         startTime
     *         endTime
     *     }
     *     publications {
     *         severity
     *         severityGroup
     *         serviceCondition
     *         serviceConditionGroup
     *         publicationWindows {
     *             startTime
     *             endTime
     *         }
     *         publicationStops @include(if: $includeStops) {
     *             uid
     *             name
     *             geometry(filters: {graph: $graph}) @include(if: $includeGeoms) {
     *                 graph
     *                 geom(simplify:$simplify)
     *             }
     *         }
     *         publicationLines @include(if: $includeLines) {
     *             hasIcon
     *             category
     *             lines {
     *                 name
     *                 operatorRef
     *                 geometry(filters: {graph: $graph}) @include(if: $includeGeoms) {
     *                     graph
     *                     geom(simplify: $simplify)
     *                 }
     *             }
     *         }
     *         textualContentLarge @include(if: $contentLarge) {
     *             ...textualContentsFragment
     *         }
     *         textualContentSmall @include(if: $contentSmall) {
     *             ...textualContentsFragment
     *         }
     *         textualContentMedium @include(if: $contentMedium) {
     *             ...textualContentsFragment
     *         }
     *     }
     * }
     *
     * fragment textualContentFragment on TextualContentType {
     *     summary
     *     reason
     *     description
     *     consequence
     *     durationText
     *     recommendation
     * }
     *
     * fragment infoLinkFragment on InfoLinkType {
     *     uri
     *     label {
     *         de @include(if: $de)
     *         fr @include(if: $fr)
     *         it @include(if: $it)
     *         en @include(if: $en)
     *     }
     * }
     *
     * fragment indexedImageFragment on IndexedImageType {
     *     image {
     *         label
     *         absoluteUrl
     *     }
     * }
     *
     * fragment textualContentsFragment on MultilingualTextualContentType {
     *     de @include(if: $de) {
     *         ...textualContentFragment
     *     }
     *     fr @include(if: $fr) {
     *         ...textualContentFragment
     *     }
     *     it @include(if: $it) {
     *         ...textualContentFragment
     *     }
     *     en @include(if: $en) {
     *         ...textualContentFragment
     *     }
     *     images {
     *         ...indexedImageFragment
     *     }
     *     infoLinks {
     *         ...infoLinkFragment
     *     }
     * }
     *
     * ```
     */
    get: operations["v2_export_retrieve_2"];
  };
}

export interface components {
  schemas: {
    AffectedTimeIntervals: {
      /** Format: date-time */
      start: string;
      /** Format: date-time */
      end: string;
      /** Format: time */
      time_of_day_start?: string | null;
      /** Format: time */
      time_of_day_end?: string | null;
    };
    /**
     * @description * `de` - De
     * * `fr` - Fr
     * * `it` - It
     * * `en` - En
     * @enum {string}
     */
    DefaultLanguageEnum: "de" | "fr" | "it" | "en";
    FeatureCollectionProperties: {
      id: number;
      affected_time_intervals:
        | components["schemas"]["AffectedTimeIntervals"][]
        | null;
      publications: string;
      links?: components["schemas"]["Link"][];
      images?: components["schemas"]["Image"][];
      sso_config: string;
      title: string;
      long_description: string;
      /** @default DISRUPTION */
      category?: string;
      start_stop?: string | null;
      end_stop?: string | null;
      /** @default */
      size?: components["schemas"]["SizeEnum"];
      default_language: components["schemas"]["DefaultLanguageEnum"];
      /** @default */
      title_de?: string;
      /** @default */
      title_fr?: string;
      /** @default */
      title_it?: string;
      /** @default */
      title_en?: string;
      /** @default */
      summary_de?: string;
      /** @default */
      summary_fr?: string;
      /** @default */
      summary_it?: string;
      /** @default */
      summary_en?: string;
      /** @default */
      reason_de?: string;
      /** @default */
      reason_fr?: string;
      /** @default */
      reason_it?: string;
      /** @default */
      reason_en?: string;
      /** @default */
      description_de?: string;
      /** @default */
      description_fr?: string;
      /** @default */
      description_it?: string;
      /** @default */
      description_en?: string;
      /** @default */
      consequence_de?: string;
      /** @default */
      consequence_fr?: string;
      /** @default */
      consequence_it?: string;
      /** @default */
      consequence_en?: string;
      /** @default */
      duration_text_de?: string;
      /** @default */
      duration_text_fr?: string;
      /** @default */
      duration_text_it?: string;
      /** @default */
      duration_text_en?: string;
      /** @default */
      recommendation_de?: string;
      /** @default */
      recommendation_fr?: string;
      /** @default */
      recommendation_it?: string;
      /** @default */
      recommendation_en?: string;
      reasons?: components["schemas"]["Reason"][];
    };
    GeoJSON: {
      type: string;
      properties: components["schemas"]["FeatureCollectionProperties"];
      features: string;
    };
    Image: {
      index: string;
      image: string;
    };
    Link: {
      /** Format: uri */
      uri: string;
      /** @default */
      label_de?: string;
      /** @default */
      label_fr?: string;
      /** @default */
      label_it?: string;
      /** @default */
      label_en?: string;
      /** @default */
      mime_type?: string;
      /** @default 0 */
      index?: number;
    };
    Reason: {
      /** @default */
      name?: string;
      /** @default */
      category_name?: string;
    };
    /**
     * @description * `S` - S
     * * `M` - M
     * * `L` - L
     * @enum {string}
     */
    SizeEnum: "S" | "M" | "L";
  };
}

export interface operations {
  /**
   * OpenApi3 schema for this API. Format can be selected via content negotiation.
   *
   * - YAML: application/vnd.oai.openapi
   * - JSON: application/vnd.oai.openapi+json
   */
  schema_retrieve: {
    parameters: {
      query: {
        format?: "json" | "yaml";
        lang?:
          | "af"
          | "ar"
          | "ar-dz"
          | "ast"
          | "az"
          | "be"
          | "bg"
          | "bn"
          | "br"
          | "bs"
          | "ca"
          | "ckb"
          | "cs"
          | "cy"
          | "da"
          | "de"
          | "dsb"
          | "el"
          | "en"
          | "en-au"
          | "en-gb"
          | "eo"
          | "es"
          | "es-ar"
          | "es-co"
          | "es-mx"
          | "es-ni"
          | "es-ve"
          | "et"
          | "eu"
          | "fa"
          | "fi"
          | "fr"
          | "fy"
          | "ga"
          | "gd"
          | "gl"
          | "he"
          | "hi"
          | "hr"
          | "hsb"
          | "hu"
          | "hy"
          | "ia"
          | "id"
          | "ig"
          | "io"
          | "is"
          | "it"
          | "ja"
          | "ka"
          | "kab"
          | "kk"
          | "km"
          | "kn"
          | "ko"
          | "ky"
          | "lb"
          | "lt"
          | "lv"
          | "mk"
          | "ml"
          | "mn"
          | "mr"
          | "ms"
          | "my"
          | "nb"
          | "ne"
          | "nl"
          | "nn"
          | "os"
          | "pa"
          | "pl"
          | "pt"
          | "pt-br"
          | "ro"
          | "ru"
          | "sk"
          | "sl"
          | "sq"
          | "sr"
          | "sr-latn"
          | "sv"
          | "sw"
          | "ta"
          | "te"
          | "tg"
          | "th"
          | "tk"
          | "tr"
          | "tt"
          | "udm"
          | "uk"
          | "ur"
          | "uz"
          | "vi"
          | "zh-hans"
          | "zh-hant";
      };
    };
    responses: {
      200: {
        content: {
          "application/vnd.oai.openapi": { [key: string]: unknown };
          "application/yaml": { [key: string]: unknown };
          "application/vnd.oai.openapi+json": { [key: string]: unknown };
          "application/json": { [key: string]: unknown };
        };
      };
    };
  };
  /** Export publications as GeoJSON */
  v1_export_publication_list: {
    parameters: {
      query: {
        /** Retrun geometries which are part of the given graph, multiple graphs can be separated by comma. Objects without matching geoms have an empty features list. */
        graph: string;
        /** Which field to use when ordering the results. */
        ordering?: string;
        /** Retrun entries which are public at the this date and time */
        public_at?: string;
        /** A search term. */
        search?: string;
        /**
         * Return entries which have the given size (usually you'll want to set this to `L`)
         *
         * * `S` - S
         * * `M` - M
         * * `L` - L
         */
        size?: "L" | "M" | "S";
        /** Return entries which belong to the given tenant slug */
        sso_config: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["GeoJSON"][];
        };
      };
    };
  };
  /** Export publications as GeoJSON */
  v1_export_publication_retrieve: {
    parameters: {
      path: {
        /** A unique integer value identifying this textual content. */
        id: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["GeoJSON"];
        };
      };
    };
  };
  /**
   * Retrun result of the following GraphQL query:
   * ```graphql
   *
   * query exportPublications(
   *     # Path parameters:
   *     $tenant: String!,
   *     $situationId: ID
   *     # Pagination:
   *     $offset: Int!,
   *     $limit: Int!,
   *     # Geometry selection and modification:
   *     $graph: String,
   *     $simplify: Int!,
   *     $includeGeoms: Boolean!,
   *     $includeLines: Boolean!,
   *     $includeStops: Boolean!,
   *     $hasGeoms: Boolean,
   *     # Time filters:
   *     $publicAt: DateTime,
   *     $publicBefore: DateTime,
   *     $publicAfter: DateTime,
   *     $publicNow: Boolean!,
   *     $affectedAt: DateTime,
   *     $affectedBefore: DateTime,
   *     $affectedAfter: DateTime,
   *     # Textual content selection:
   *     $contentLarge: Boolean!,
   *     $contentSmall: Boolean!,
   *     $contentMedium: Boolean!,
   *     $de: Boolean!,
   *     $fr: Boolean!,
   *     $it: Boolean!,
   *     $en: Boolean!,
   * ) {
   *     paginatedSituations(
   *         tenant: $tenant
   *         pagination: {offset: $offset, limit: $limit}
   *         filters: {
   *             id: $situationId,
   *             publicNow: $publicNow,
   *             publicAt: $publicAt,
   *             publicBefore: $publicBefore,
   *             publicAfter: $publicAfter,
   *             affectedAt: $affectedAt,
   *             affectedBefore: $affectedBefore,
   *             affectedAfter: $affectedAfter,
   *             hasGeoms: $hasGeoms
   *         }
   *     ) {
   *       totalCount
   *       results {
   *           ...situationFragment
   *       }
   *     }
   * }
   *
   * fragment situationFragment on SituationType {
   *     id
   *     title
   *     publicationStopNames
   *     publicationLineNames
   *     affectedTimeIntervalsStart
   *     affectedTimeIntervalsEnd
   *     publicationWindowsStart
   *     publicationWindowsEnd
   *     reasons {
   *         name
   *         categoryName
   *         tenant
   *     }
   *     affectedTimeIntervals {
   *         startTime
   *         endTime
   *     }
   *     publicationWindows {
   *         startTime
   *         endTime
   *     }
   *     publications {
   *         severity
   *         severityGroup
   *         serviceCondition
   *         serviceConditionGroup
   *         publicationWindows {
   *             startTime
   *             endTime
   *         }
   *         publicationStops @include(if: $includeStops) {
   *             uid
   *             name
   *             geometry(filters: {graph: $graph}) @include(if: $includeGeoms) {
   *                 graph
   *                 geom(simplify:$simplify)
   *             }
   *         }
   *         publicationLines @include(if: $includeLines) {
   *             hasIcon
   *             category
   *             lines {
   *                 name
   *                 operatorRef
   *                 geometry(filters: {graph: $graph}) @include(if: $includeGeoms) {
   *                     graph
   *                     geom(simplify: $simplify)
   *                 }
   *             }
   *         }
   *         textualContentLarge @include(if: $contentLarge) {
   *             ...textualContentsFragment
   *         }
   *         textualContentSmall @include(if: $contentSmall) {
   *             ...textualContentsFragment
   *         }
   *         textualContentMedium @include(if: $contentMedium) {
   *             ...textualContentsFragment
   *         }
   *     }
   * }
   *
   * fragment textualContentFragment on TextualContentType {
   *     summary
   *     reason
   *     description
   *     consequence
   *     durationText
   *     recommendation
   * }
   *
   * fragment infoLinkFragment on InfoLinkType {
   *     uri
   *     label {
   *         de @include(if: $de)
   *         fr @include(if: $fr)
   *         it @include(if: $it)
   *         en @include(if: $en)
   *     }
   * }
   *
   * fragment indexedImageFragment on IndexedImageType {
   *     image {
   *         label
   *         absoluteUrl
   *     }
   * }
   *
   * fragment textualContentsFragment on MultilingualTextualContentType {
   *     de @include(if: $de) {
   *         ...textualContentFragment
   *     }
   *     fr @include(if: $fr) {
   *         ...textualContentFragment
   *     }
   *     it @include(if: $it) {
   *         ...textualContentFragment
   *     }
   *     en @include(if: $en) {
   *         ...textualContentFragment
   *     }
   *     images {
   *         ...indexedImageFragment
   *     }
   *     infoLinks {
   *         ...infoLinkFragment
   *     }
   * }
   *
   * ```
   */
  v2_export_retrieve: {
    parameters: {
      query: {
        affectedAt?: string | null;
        contentLarge?: boolean;
        contentMedium?: boolean;
        contentSmall?: boolean;
        de?: boolean;
        en?: boolean;
        fr?: boolean;
        graph?: string | null;
        hasGeoms?: boolean | null;
        includeGeoms?: boolean;
        includeLines?: boolean;
        includeStops?: boolean;
        it?: boolean;
        limit?: number;
        offset?: number;
        publicAfter?: string | null;
        publicAt?: string | null;
        publicBefore?: string | null;
        /** Preferred over publicAt to enable caching. `false` does not apply the opposite filter but disables it. */
        publicNow?: boolean;
        simplify?: number;
        timeintervalAfter?: string | null;
        timeintervalBefore?: string | null;
      };
      path: {
        tenant: string;
      };
    };
    responses: {
      /** No response body */
      200: unknown;
    };
  };
  /**
   * Retrun result of the following GraphQL query:
   * ```graphql
   *
   * query exportPublications(
   *     # Path parameters:
   *     $tenant: String!,
   *     $situationId: ID
   *     # Pagination:
   *     $offset: Int!,
   *     $limit: Int!,
   *     # Geometry selection and modification:
   *     $graph: String,
   *     $simplify: Int!,
   *     $includeGeoms: Boolean!,
   *     $includeLines: Boolean!,
   *     $includeStops: Boolean!,
   *     $hasGeoms: Boolean,
   *     # Time filters:
   *     $publicAt: DateTime,
   *     $publicBefore: DateTime,
   *     $publicAfter: DateTime,
   *     $publicNow: Boolean!,
   *     $affectedAt: DateTime,
   *     $affectedBefore: DateTime,
   *     $affectedAfter: DateTime,
   *     # Textual content selection:
   *     $contentLarge: Boolean!,
   *     $contentSmall: Boolean!,
   *     $contentMedium: Boolean!,
   *     $de: Boolean!,
   *     $fr: Boolean!,
   *     $it: Boolean!,
   *     $en: Boolean!,
   * ) {
   *     paginatedSituations(
   *         tenant: $tenant
   *         pagination: {offset: $offset, limit: $limit}
   *         filters: {
   *             id: $situationId,
   *             publicNow: $publicNow,
   *             publicAt: $publicAt,
   *             publicBefore: $publicBefore,
   *             publicAfter: $publicAfter,
   *             affectedAt: $affectedAt,
   *             affectedBefore: $affectedBefore,
   *             affectedAfter: $affectedAfter,
   *             hasGeoms: $hasGeoms
   *         }
   *     ) {
   *       totalCount
   *       results {
   *           ...situationFragment
   *       }
   *     }
   * }
   *
   * fragment situationFragment on SituationType {
   *     id
   *     title
   *     publicationStopNames
   *     publicationLineNames
   *     affectedTimeIntervalsStart
   *     affectedTimeIntervalsEnd
   *     publicationWindowsStart
   *     publicationWindowsEnd
   *     reasons {
   *         name
   *         categoryName
   *         tenant
   *     }
   *     affectedTimeIntervals {
   *         startTime
   *         endTime
   *     }
   *     publicationWindows {
   *         startTime
   *         endTime
   *     }
   *     publications {
   *         severity
   *         severityGroup
   *         serviceCondition
   *         serviceConditionGroup
   *         publicationWindows {
   *             startTime
   *             endTime
   *         }
   *         publicationStops @include(if: $includeStops) {
   *             uid
   *             name
   *             geometry(filters: {graph: $graph}) @include(if: $includeGeoms) {
   *                 graph
   *                 geom(simplify:$simplify)
   *             }
   *         }
   *         publicationLines @include(if: $includeLines) {
   *             hasIcon
   *             category
   *             lines {
   *                 name
   *                 operatorRef
   *                 geometry(filters: {graph: $graph}) @include(if: $includeGeoms) {
   *                     graph
   *                     geom(simplify: $simplify)
   *                 }
   *             }
   *         }
   *         textualContentLarge @include(if: $contentLarge) {
   *             ...textualContentsFragment
   *         }
   *         textualContentSmall @include(if: $contentSmall) {
   *             ...textualContentsFragment
   *         }
   *         textualContentMedium @include(if: $contentMedium) {
   *             ...textualContentsFragment
   *         }
   *     }
   * }
   *
   * fragment textualContentFragment on TextualContentType {
   *     summary
   *     reason
   *     description
   *     consequence
   *     durationText
   *     recommendation
   * }
   *
   * fragment infoLinkFragment on InfoLinkType {
   *     uri
   *     label {
   *         de @include(if: $de)
   *         fr @include(if: $fr)
   *         it @include(if: $it)
   *         en @include(if: $en)
   *     }
   * }
   *
   * fragment indexedImageFragment on IndexedImageType {
   *     image {
   *         label
   *         absoluteUrl
   *     }
   * }
   *
   * fragment textualContentsFragment on MultilingualTextualContentType {
   *     de @include(if: $de) {
   *         ...textualContentFragment
   *     }
   *     fr @include(if: $fr) {
   *         ...textualContentFragment
   *     }
   *     it @include(if: $it) {
   *         ...textualContentFragment
   *     }
   *     en @include(if: $en) {
   *         ...textualContentFragment
   *     }
   *     images {
   *         ...indexedImageFragment
   *     }
   *     infoLinks {
   *         ...infoLinkFragment
   *     }
   * }
   *
   * ```
   */
  v2_export_retrieve_2: {
    parameters: {
      query: {
        affectedAt?: string | null;
        contentLarge?: boolean;
        contentMedium?: boolean;
        contentSmall?: boolean;
        de?: boolean;
        en?: boolean;
        fr?: boolean;
        graph?: string | null;
        hasGeoms?: boolean | null;
        includeGeoms?: boolean;
        includeLines?: boolean;
        includeStops?: boolean;
        it?: boolean;
        limit?: number;
        offset?: number;
        publicAfter?: string | null;
        publicAt?: string | null;
        publicBefore?: string | null;
        /** Preferred over publicAt to enable caching. `false` does not apply the opposite filter but disables it. */
        publicNow?: boolean;
        simplify?: number;
        timeintervalAfter?: string | null;
        timeintervalBefore?: string | null;
      };
      path: {
        situation_id: string;
        tenant: string;
      };
    };
    responses: {
      /** No response body */
      200: unknown;
    };
  };
}

export interface external {}
