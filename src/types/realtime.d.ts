import { Feature, FeatureCollection, Point } from 'geojson';
import StopSequence from './realtime-asyncapi-types/StopSequence';
import StopSequenceCall from './realtime-asyncapi-types/StopSequenceCall';
import StopSequenceMessage from './realtime-asyncapi-types/StopSequenceMessage';
import TrackerTrajectory from './realtime-asyncapi-types/TrackerTrajectory';
import PartialTrajectoryMessage from './realtime-asyncapi-types/PartialTrajectoryMessage';
import BufferMessage from './realtime-asyncapi-types/BufferMessage';
import FullTrajectory from './realtime-asyncapi-types/FullTrajectory';
import FullTrajectoryProperties from './realtime-asyncapi-types/FullTrajectoryProperties';
import DeletedVehicleMessage from './realtime-asyncapi-types/DeletedVehicleMessage';
import AnonymousSchema_236 from './realtime-asyncapi-types/AnonymousSchema_236';
import AnonymousSchema_65 from './realtime-asyncapi-types/AnonymousSchema_65';

export declare type RealtimeChannelModeSuffix = '_schematic' | '';

export declare type RealtimeMode = 'raw' | 'schematic' | 'topographic';

/**
 * @type RealtimeBbox
 */
export type RealtimeBbox = (number | string)[];

export type RealtimeBuffer = [number, number];

export interface RealtimeBufferResponse extends BufferMessage {}

export type RealtimeChannelName =
  | 'buffer'
  | 'extra_geoms'
  | 'healthcheck'
  | 'line'
  | 'websocket'
  | `deleted_vehicles${RealtimeChannelModeSuffix}`
  | `full_trajectory${RealtimeChannelModeSuffix}_${RealtimeTenant}_${RealtimeTrainId}`
  | `stopsequence_${RealtimeTenant}_${RealtimeTrainId}`
  | `timetable_${RealtimeStationId}`
  | `trajectory${RealtimeChannelModeSuffix}`;

export interface RealtimeDeletedVehiclesResponse
  extends DeletedVehicleMessage {}

export interface RealtimeDeparture {
  at_station_ds100: string;
  call_id: number;
  created_at: string;
  formation: any;
  fzo_estimated_time: number;
  has_fzo: boolean;
  line: RealtimeLine;
  min_arrival_time: number;
  new_to: boolean;
  next_stoppoints: string[];
  no_stop_between: boolean;
  no_stop_till: any;
  platform: string;
  ris_aimed_time: number;
  ris_estimated_time: number;
  state: string; /// (BOARDING|STOP_CANCELLED|JOURNEY_CANCELLED|HIDDEN)/
  time: number;
  timediff: number; // This property seems to alawy been 0
  timestamp: number; // This property seems to never exists
  to: string[];
  train_id: RealtimeTrainId;
  train_number: number;
  train_type: number;
  updated_at: number;
}

export interface RealtimeDepartureExtended extends RealtimeDeparture {
  cancelled?: boolean; // value generated by RealtimeAPI class
}

export type RealtimeElevatorState = 'ALL_OPERABLE' | string;

export interface RealtimeExtraGeom extends Feature {
  properties: RealtimeExtraGeomProperties;
}

export interface RealtimeExtraGeomDeleted {
  properties: RealtimeExtraGeomProperties;
  type: 'Deleted';
}
// minX: number,
// minY: number,
// maxX: number,
// maxY: number,
// zoom: number,
// string?,
// `gen_level=${RealtimeGeneralizationLevel}`| undefined,
// `tenant=${UnionConcat<RealtimeTenant, ','>}`!,
// `mots=${UnionConcat<RealtimeMot, ','>}`!,

export interface RealtimeExtraGeomProperties {
  ref: number | string;
}

export type RealtimeExtraGeoms = Record<string, Feature[]>;

export interface RealtimeExtraGeomsResponse {
  client_reference: null;
  content: RealtimeExtraGeom | RealtimeExtraGeomDeleted;
  source: `extra_geoms`;
  timestamp: number;
}

export interface RealtimeFullTrajectory extends FullTrajectory {}

export interface RealtimeFullTrajectoryProperties
  extends FullTrajectoryProperties {}

export type RealtimeGeneralizationLevel = 10 | 100 | 30 | 5;

export interface RealtimeHealth {
  heathly: boolean;
  service: RealtimeService;
  tenant: null | string;
}

export interface RealtimeHealthCheckResponse {
  client_reference: null;
  content: RealtimeHealth;
  source: 'healthcheck';
  timestamp: number;
}

export interface RealtimeLine {
  color: string;
  id: number;
  name: string;
  stroke: string;
  text_color: string;
}

export type RealtimeMot = AnonymousSchema_226;

export interface RealtimeNews {
  incident_program: boolean;
  messages: RealtimeNewsMessage[];
}

export interface RealtimeNewsMessage {
  content: string;
  lines: RealtimeLine[];
  title: string;
  updated: string; // TODO: ISO string
}

export interface RealtimeNewsTickerResponse {
  client_reference: null;
  content: RealtimeNews;
  source: `${RealtimeTenant}_newsticker`;
  timestamp: number;
}

export type RealtimeService =
  | 'redis_websocket_api'
  | 'tralis_fzo'
  | 'tralis_geofox'
  | 'tralis_newsticker'
  | 'tralis_stations'
  | 'tralis_vdv'
  | 'tralis_worker'
  | string;

export interface RealtimeStation extends Feature {
  geometry: Point;
  properties: RealtimeStationproperties;
}

export type RealtimeStationId = number;

export interface RealtimeStationproperties extends Feature {
  elevatorOutOfOrder: boolean;
  elevators: object;
  elevatorState: RealtimeElevatorState;
  hasAccessibility: boolean;
  hasAirport: boolean;
  hasElevator: boolean;
  hasZOB: boolean;
  name: string;
  networkLines: RealtimeLine[];
  tenant: RealtimeTenant;
  transfers: RealtimeTransfer[];
  uic: RealtimeStationId;
}

export interface RealtimeStationResponse {
  client_reference: null;
  content: RealtimeNews;
  source: `station_${RealtimeStationId}`;
  timestamp: number;
}

export interface RealtimeStopCall extends StopSequenceCall {}

export interface RealtimeStopSequence extends StopSequence {}

export interface RealtimeStopSequenceResponse extends StopSequenceMessage {}

export type RealtimeStopState = AnonymousSchema_236;

export type RealtimeTenant = '' | 'sbb' | 'sbh' | 'sbm' | string;

export interface RealtimeTimetableResponse {
  client_reference: null;
  content: RealtimeDeparture;
  source: `timetable_${RealtimeStationId}`;
  timestamp: number;
}

export type RealtimeTrainId = string;

export interface RealtimeTrajectory extends TrackerTrajectory {}

export interface RealtimeTrajectoryResponse extends PartialTrajectoryMessage {}

export type RealtimeTrajectoryState = AnonymousSchema_65;

export interface RealtimeTransfer {
  lines: string[];
  mot: RealtimeMot;
}
